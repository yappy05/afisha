require('dotenv').config()
const express = require('express')
const axios = require('axios')
const cheerio = require('cheerio')
const {connectMongo, connectRedis, redisClient} = require('./config/database');
const mongoose = require("mongoose");
const https = require('https');
const fs = require('fs');
const cors = require('cors')
const puppeteer = require('puppeteer')

const app = express()
const PORT = process.env.PORT || 3000

app.use(express.json())
app.use(express.static('public'))

app.use(cors({
    origin: '*',
    methods: ['GET', 'POST', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization']
}))

const eventSchema = new mongoose.Schema({
    title: String,
    time: String,
    place: String,
    link: String
}, {timestamps: true})

const Event = mongoose.model('Event', eventSchema)

async function parseYandexAfisha(city, category, formattedDate) {
    let browser;
    try {
        browser = await puppeteer.launch({
            headless: true,
            args: [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--disable-accelerated-2d-canvas'
            ]
        });

        const page = await browser.newPage();

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã
        await page.setDefaultNavigationTimeout(70000);
        await page.setDefaultTimeout(40000);

        // –ë–ª–æ–∫–∏—Ä—É–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        await page.setRequestInterception(true);
        page.on('request', (request) => {
            // –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Å—Ç–∏–ª–∏, —à—Ä–∏—Ñ—Ç—ã –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            if (['image', 'stylesheet', 'font'].includes(request.resourceType())) {
                request.abort();
            } else {
                request.continue();
            }
        });

        let url = ''
        if (category === 'events') {
            url = `https://afisha.timepad.ru/${city}/events?date=${formattedDate}`
        } else {
            url = `https://afisha.timepad.ru/${city}/categories/${category}?date=${formattedDate}`
        }

        // const url = 'https://afisha.timepad.ru/moscow/categories/sport?date=2025-09-26T00%3A00%3A00%2B03%3A00%2C2025-09-26T23%3A59%3A59%2B03%3A00';
        // console.log('–ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å:', url);

        // –ü—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
        await page.goto(url, {
            waitUntil: 'domcontentloaded', // –ë—ã—Å—Ç—Ä–µ–µ —á–µ–º networkidle
            timeout: 40000
        });

        console.log('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –∏—â–µ–º —ç–ª–µ–º–µ–Ω—Ç...');

        // –ñ–¥–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
        try {
            await page.waitForSelector('.lpage.lflexchild--stretched', {
                timeout: 25000
            });
        } catch (e) {
            console.log('–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
        }

        try {
            await page.waitForSelector('h2.ctypography.ctypography--regular.ctypography--no-padding.ctypography__body.tmultiline.tmultiline-3.t-color-black', {
                timeout: 35000
            });
            await p
        } catch (e) {
            console.log('H2 —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞ 5 —Å–µ–∫—É–Ω–¥, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
        }



        // –í—Å–µ —Ä–∞–≤–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç
        // const button = await page.evaluate(() => {
        //     const div = document.querySelector('.cbtn.cbtn--variant_secondary.cbtn--fixed.cbtn--large.lmodules__4');
        //     return div ? div.outerHTML : '–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞';
        // });
        for (let i = 0; i < 2; i++) {
            try {
                console.log(`–ü–æ–ø—ã—Ç–∫–∞ ${i + 1}/10`);

                // –ò—â–µ–º –∫–Ω–æ–ø–∫—É
                const button = await page.$('.cbtn.cbtn--variant_secondary.cbtn--fixed.cbtn--large.lmodules__4');

                if (!button) {
                    console.log('–ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º');
                    break;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞
                const isClickable = await button.evaluate(btn => {
                    return btn.offsetParent !== null && !btn.disabled;
                });

                if (!isClickable) {
                    console.log('–ö–Ω–æ–ø–∫–∞ –Ω–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º');
                    break;
                }

                // –ù–∞–∂–∏–º–∞–µ–º
                await button.click();
                console.log(`–ù–∞–∂–∞—Ç–∏–µ ${i + 1} —É—Å–ø–µ—à–Ω–æ`);

                // –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                await new Promise(resolve => setTimeout(resolve, 2000));

            } catch (e) {
                console.log('–û—à–∏–±–∫–∞:', e.message);
                break;
            }
        }
        const html = await page.content();
        const $ = cheerio.load(html);
        const events = [];

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
        $('.ceventcard').each((index, element) => {
            const $el = $(element);

            // –ü—Ä–æ—Å—Ç–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
            const title = $el.find('.ctypography__body').text().trim();
            const time = $el.find('.ctypography.ctypography--no-padding.ctypography__small.ceventcard__date').text().trim();
            const place = $el.find('.ctypography.ctypography--no-padding.ctypography--no-wrap.ctypography__small.t-color-gray-50').text().trim();
            // –ò–ª–∏ –∏—â–µ–º –ø–æ –∞—Ç—Ä–∏–±—É—Ç–∞–º
            // const title = $el.find('[class*="tmultiline"]').text().trim();

            events.push({
                title: title,
                time,
                place,
                // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è
                link: $el.find('a').attr('href')
            });
        });

        // for (let i = 0; i < 2; i++) {
        //     await page.waitForSelector('.cbtn.cbtn--variant_secondary.cbtn--fixed.cbtn--large.lmodules__4', {
        //         timeout: 30000
        //     });
        //     await page.waitForTimeout(60000);
        //     console.log(`–£—Å–ø–µ—à–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ ${clickCount}`);
        // }
        // await page.click('.cbtn.cbtn--variant_secondary.cbtn--fixed.cbtn--large.lmodules__4');

        await browser.close();

        return{
            success: true,
            // button: button,
            elementsCount: events.length,
            elements: events
        };

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error.message);
        if (browser) await browser.close();
        return{ error: error.message };
    }
}

function getFallbackEvents(city) {
    console.log(city)
    const cityLower = city.toLowerCase()

    if (cityLower.includes('–º–æ—Å–∫–≤–∞')) {
        return [
            {
                title: "üé≠ –ö–æ–Ω—Ü–µ—Ä—Ç —Å–∏–º—Ñ–æ–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ—Ä–∫–µ—Å—Ç—Ä–∞",
                date: "–°–µ–≥–æ–¥–Ω—è, 19:00",
                place: "–ë–æ–ª—å—à–æ–π —Ç–µ–∞—Ç—Ä",
                description: "–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ß–∞–π–∫–æ–≤—Å–∫–æ–≥–æ –∏ –†–∞—Ö–º–∞–Ω–∏–Ω–æ–≤–∞"
            },
            {
                title: "üé® –í—ã—Å—Ç–∞–≤–∫–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞",
                date: "–ó–∞–≤—Ç—Ä–∞, 12:00-20:00",
                place: "–¢—Ä–µ—Ç—å—è–∫–æ–≤—Å–∫–∞—è –≥–∞–ª–µ—Ä–µ—è",
                description: "–†–∞–±–æ—Ç—ã —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤"
            },
            {
                title: "üé¨ –ö–∏–Ω–æ—Ñ–µ—Å—Ç–∏–≤–∞–ª—å",
                date: "20 –¥–µ–∫–∞–±—Ä—è, 18:30",
                place: "–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä '–û–∫—Ç—è–±—Ä—å'",
                description: "–ü—Ä–µ–º—å–µ—Ä–Ω—ã–µ –ø–æ–∫–∞–∑—ã –Ω–æ–≤—ã—Ö —Ñ–∏–ª—å–º–æ–≤"
            },
            {
                title: "üé™ –¶–∏—Ä–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ",
                date: "21 –¥–µ–∫–∞–±—Ä—è, 15:00",
                place: "–ë–æ–ª—å—à–æ–π –ú–æ—Å–∫–æ–≤—Å–∫–∏–π —Ü–∏—Ä–∫",
                description: "–®–æ—É —Å —É—á–∞—Å—Ç–∏–µ–º –ª—É—á—à–∏—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤"
            },
            {
                title: "üéº –î–∂–∞–∑–æ–≤—ã–π –≤–µ—á–µ—Ä",
                date: "22 –¥–µ–∫–∞–±—Ä—è, 20:00",
                place: "–ö–ª—É–± '–ò–≥–æ—Ä—å –ë—É—Ç–º–∞–Ω'",
                description: "–í—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –¥–∂–∞–∑–æ–≤—ã—Ö –∫–æ–ª–ª–µ–∫—Ç–∏–≤–æ–≤"
            }
        ]
    }

    if (cityLower.includes('–ø–µ—Ç–µ—Ä–±—É—Ä–≥') || cityLower.includes('—Å–ø–±')) {
        return [
            {
                title: "üé≠ –ë–∞–ª–µ—Ç '–õ–µ–±–µ–¥–∏–Ω–æ–µ –æ–∑–µ—Ä–æ'",
                date: "–°–µ–≥–æ–¥–Ω—è, 19:30",
                place: "–ú–∞—Ä–∏–∏–Ω—Å–∫–∏–π —Ç–µ–∞—Ç—Ä",
                description: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ß–∞–π–∫–æ–≤—Å–∫–æ–≥–æ"
            },
            {
                title: "üé® –í—ã—Å—Ç–∞–≤–∫–∞ –≠—Ä–º–∏—Ç–∞–∂–∞",
                date: "–ó–∞–≤—Ç—Ä–∞, 10:00-18:00",
                place: "–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –≠—Ä–º–∏—Ç–∞–∂",
                description: "–®–µ–¥–µ–≤—Ä—ã –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –º—É–∑–µ—è"
            },
            {
                title: "üéµ –û—Ä–≥–∞–Ω–Ω—ã–π –∫–æ–Ω—Ü–µ—Ä—Ç",
                date: "20 –¥–µ–∫–∞–±—Ä—è, 17:00",
                place: "–ü–µ—Ç–µ—Ä–±—É—Ä–≥—Å–∫–∞—è —Ñ–∏–ª–∞—Ä–º–æ–Ω–∏—è",
                description: "–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ë–∞—Ö–∞ –∏ –ú–æ—Ü–∞—Ä—Ç–∞"
            },
            {
                title: "üé≠ –°–ø–µ–∫—Ç–∞–∫–ª—å '–†–µ–≤–∏–∑–æ—Ä'",
                date: "21 –¥–µ–∫–∞–±—Ä—è, 19:00",
                place: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∏–Ω—Å–∫–∏–π —Ç–µ–∞—Ç—Ä",
                description: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –ì–æ–≥–æ–ª—é"
            },
            {
                title: "üéª –í–µ—á–µ—Ä –∫–∞–º–µ—Ä–Ω–æ–π –º—É–∑—ã–∫–∏",
                date: "22 –¥–µ–∫–∞–±—Ä—è, 18:00",
                place: "–ú–∞–ª—ã–π –∑–∞–ª —Ñ–∏–ª–∞—Ä–º–æ–Ω–∏–∏",
                description: "–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –¥–ª—è —Å—Ç—Ä—É–Ω–Ω–æ–≥–æ –∫–≤–∞—Ä—Ç–µ—Ç–∞"
            }
        ]
    }

    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –≥–æ—Ä–æ–¥–æ–≤
    return [
        {
            title: `–ö–æ–Ω—Ü–µ—Ä—Ç –≤ ${city}`,
            date: "–°–µ–≥–æ–¥–Ω—è, 19:00",
            place: "–ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ü–µ—Ä—Ç–Ω—ã–π –∑–∞–ª",
            description: "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ"
        },
        {
            title: `–í—ã—Å—Ç–∞–≤–∫–∞ –≤ ${city}`,
            date: "–ó–∞–≤—Ç—Ä–∞, 12:00",
            place: "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤—ã—Å—Ç–∞–≤–æ—á–Ω—ã–π –∑–∞–ª",
            description: "–ü–æ—Å–µ—Ç–∏—Ç–µ –≤—ã—Å—Ç–∞–≤–∫—É –º–µ—Å—Ç–Ω—ã—Ö —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤"
        }
    ]
}

async function getAfishaWithCache(city, category, formattedDate) {
    const CACHE_TTL = 3600; // 1 —á–∞—Å
    const cityNormalized = city.toLowerCase();


    try {
        const cached = await redisClient.get(`afisha:${cityNormalized}:${category}:${formattedDate}`);
        if (cached) {
            console.log('üì¶ –î–∞–Ω–Ω—ã–µ –∏–∑ Redis');
            // console.log(cached)
            return JSON.parse(cached);
        }
    } catch (error) {
        console.log('Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }

    try {
        const oneHourAgo = new Date(Date.now() - 3600000);
        console.log('üîç –ò—â–µ–º –≤ MongoDB –¥–ª—è –≥–æ—Ä–æ–¥–∞:', cityNormalized);

        const cachedEvents = await Event.find({
            city: city,
            category: category,
            formattedDate: formattedDate,
            createdAt: {$gt: oneHourAgo}
        }).limit(10);

        console.log('üìä –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π –≤ MongoDB:', cachedEvents.length);

        if (cachedEvents.length > 0) {
            console.log('üíæ –î–∞–Ω–Ω—ã–µ –∏–∑ MongoDB');
            const events = cachedEvents.map(e => ({
                city: e.title,
                date: e.date,
                place: e.place,
                description: e.description
            }));

            try {
                await redisClient.setEx(`afisha:${cityNormalized}:${category}:${formattedDate}`, CACHE_TTL, JSON.stringify(events));
                console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Redis');
            } catch (error) {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Redis');
            }

            return events;
        }
    } catch (error) {
        console.log('‚ùå MongoDB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
    }


    console.log('–ü–∞—Ä—Å–∏–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞:', cityNormalized);
    const result = await parseYandexAfisha(city, category, formattedDate);
    const events = result.elements;

    try {
        console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MongoDB:', events.length, '—Å–æ–±—ã—Ç–∏–π');
        // await Event.deleteMany({city: cityNormalized});

        const eventsToSave = events.map(event => ({
            ...event,
            createdAt: new Date()
        }));

        await Event.insertMany(eventsToSave);
        console.log('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ MongoDB');


        // const savedCount = await Event.countDocuments({title});
        // console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞: –≤ MongoDB —Ç–µ–ø–µ—Ä—å', savedCount, '—Å–æ–±—ã—Ç–∏–π –¥–ª—è', cityNormalized);

    } catch (error) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ MongoDB:', error.message);
    }

    try {
        await redisClient.setEx(`afisha:${cityNormalized}:${category}:${formattedDate}`, CACHE_TTL, JSON.stringify(events));
        console.log('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Redis');
    } catch (error) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Redis:', error.message);
    }

    return events;
}

app.get('/api/afisha', async (req, res) => {
    console.log('get aifhs')
    try {
        const city = req.query.city;
        if (!city) return res.status(400).json({error: '–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥'});
        const events = await getAfishaWithCache(city)
        return res.json({
            success: true,
            city: city,
            elementsCount: elements.length,
            elements: elements
        });
    } catch (error) {
        return res.status(500).json({
            success: false,
            error: error.message
        });
    }
})

app.get('/', (req, res) => {
    res.sendFile(__dirname + '/public/index.html');
});

app.get('/api/test', (req, res) => {
    res.json({message: '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!!', timestamp: new Date()})
})

app.post('/api/parser', async (req, res) => {
    const { city, category, formattedDate } = req.body;
    const result = await getAfishaWithCache(city, category, formattedDate)
    return res.json(result)
});

async function startServer() {
    await connectMongo();
    await connectRedis();

    // const sslOptions = {
    //     key: fs.readFileSync('localhost+2-key.pem'),
    //     cert: fs.readFileSync('localhost+2.pem')
    // };
    //
    // const httpsServer = https.createServer(sslOptions, app);
    //
    // httpsServer.listen(PORT, () => {
    //     console.log(`TTPS —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ https://localhost:${PORT}`);1
    // });

    app.listen(PORT || 30000)

    if (process.env.REDIRECT_HTTP === 'true') {
        const http = require('http');
        const httpApp = express();

        httpApp.use((req, res) => {
            res.redirect(`https://localhost:${PORT}${req.url}`);
        });

        http.createServer(httpApp).listen(3001, () => {
            console.log(`üîÑ HTTP —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –ø–æ—Ä—Ç—É 3001`);
        });
    }
}

startServer().catch(console.error);